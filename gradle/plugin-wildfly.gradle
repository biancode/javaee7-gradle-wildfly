/*
  Wildfly Settings

  https://github.com/fwelland/gradle-wildfly-plugin

  BUILDSCRIPT-CLASSPATH-DEPENDENCY: 'org.fhw:gradle-wildfly-plugin:0.2'

  Empfehlung fuer automatische Web-Browser-Tests: Selenium HQ via Firefox Plugin
  http://www.seleniumhq.org/download/
 
  GNU GPLv3 Copyright by Klaus Landsdorf - Lohne (Olb) - Germany

  http://bianco-royal.com/
 */
apply plugin: 'wildfly'
apply plugin: 'war'

logger.info("Wildfly Plugin activated with version ${project.wildflyVersion}")

dependencies {
  
  // search for modules: http://mvnrepository.com/artifact/org.wildfly
  
  providedCompile "org.wildfly:wildfly-spec-api:${project.wildflyVersion}"
  
  providedCompile 'javax:javaee-api:7.0'
  
  providedCompile 'com.h2database:h2:1.4.186'
  
  // Test Compile Arquillian
  testCompile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-depchain:2.2.0'
  testCompile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-gradle-depchain:2.2.0'
  testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.2.2'
  testCompile 'org.jboss.arquillian:arquillian-bom:1.1.9.Final'
  testCompile 'org.jboss.arquillian.junit:arquillian-junit-container:1.1.9.Final'

  // Test Rumtime Arquillian - wildfly have to be running on system where you start build
	if(project.wildflyVersion == '8.2.0.Final') {
	  testRuntime "org.wildfly:wildfly-arquillian-container-remote:${project.wildflyVersion}"
	}
	else {
	  testRuntime "org.wildfly.arquillian:wildfly-arquillian-container-remote:${project.arquillianContainerVersion}"	
	}
	
  testRuntime 'org.slf4j:slf4j-simple:1.7.12'
  testRuntime 'org.mockito:mockito-all:2.0.2-beta'
  testRuntime 'com.sun.faces:jsf-api:2.2.12'
}


/*
  Unix buildserver should be env['HOSTNAME']
  
  check it out with command 'env' on your buildservers commandline
 */
def env = System.getenv()
 
if(env['COMPUTERNAME'] == 'BUILDSERVER') {
  logger.info("setting appserver for buildserver")
  project.wildflyHome = "//D:/appserver/wildfly/wildfly-${project.wildflyVersion}"
}
else {
	if(env['COMPUTERNAME'] != null) {
	  logger.info("System.Computername: ${env['COMPUTERNAME']}")
	}
	else {
	  logger.info("System.Computername: ${env['HOSTNAME']}")
	}
	
}

ext.jbossHome = hasProperty('jbossHome') ? jbossHome : project.wildflyHome

wildfly {
	
	if(env['OS'] == null) {
		cli_script = 'jboss-cli.sh'
		start_script = 'standalone.sh'

		logger.info("Your System to build on: ${env['OSTYPE']}")
	}
	else {
		cli_script = 'jboss-cli.bat'
		start_script = 'standalone.bat'
		
		logger.info("Your System to build on: ${env['OS']}")		
	}
		
	wildfly_home = project.wildflyHome
  
	path_to_deployable = war.archivePath
	deployment_name = rootProject.name
}

test {

  if(project.javaVersion != '1.8' 
  		&& project.javaVersion != '1.9') {
		jvmArgs '-XX:MaxPermSize=256m'
	}

  /* jvmArgs '-Djboss.socket.binding.port-offset=20000' */
  	
  environment 'JBOSS_HOME', project.wildflyHome
  systemProperty 'java.util.logging.manager', 'org.jboss.logmanager.LogManager'
}

ext {
  generatedGroovyDir = file("${buildDir}/generated/main/groovy")
  generatedJavaDir = file("${buildDir}/generated/main/java")
}

sourceSets {
    main {
        groovy {
            srcDir project.generatedGroovyDir
        }
        
        java {
            srcDir project.generatedJavaDir
        }
    }
}

compileGroovy {
    doFirst {
        project.generatedGroovyDir.mkdirs()
    }

    options.compilerArgs += ['-s', project.generatedGroovyDir]  
}

compileJava {

    doFirst {
        project.generatedJavaDir.mkdirs()
    }

    options.compilerArgs += ['-s', project.generatedJavaDir]
}

/*
	TODO: process will not end and hangup on press any key  :(
	there are some ps1 scripts for windows in scripts
 */	
//task localDeploy {
//  
//	def process = "${project.wildflyHome}/bin/jboss-cli.bat --connect --command=\"deploy --force ${war.archivePath}\"".execute()
//	process.waitFor()
//	println "return code: ${ process.exitValue()}"
//	println "stderr: ${process.err.text}"
//	println "stdout: ${process.in.text}"
//
//
//	process = "${project.wildflyHome}/bin/jboss-cli.bat --connect --command=\"/:shutdown(restart=true)\"".execute()
//	process.waitFor()
//	println "return code: ${ process.exitValue()}"
//	println "stderr: ${process.err.text}"
//	println "stdout: ${process.in.text}"
//
//
//	doLast {
//		logger.info("deploy ${war.archivePath} to Wildfly ${project.wildflyHome}")
//	}
//}
//
//task localUndeploy {
//  
//  def process = "${project.wildflyHome}/bin/jboss-cli.bat --connect --command=\"undeploy ${war.name}\"".execute()
//  process.waitFor()
//  println "return code: ${ process.exitValue()}"
//  println "stderr: ${process.err.text}"
//  println "stdout: ${process.in.text}"
//    
//  process = "${project.wildflyHome}/bin/jboss-cli.bat --connect --command=\"/:shutdown(restart=true)\"".execute()
//  process.waitFor()
//  println "return code: ${ process.exitValue()}"
//  println "stderr: ${process.err.text}"
//  println "stdout: ${process.in.text}"
//  
//  doLast {
//    logger.info("deploy ${war.archivePath} to Wildfly ${project.wildflyHome}")
//  }
//}

// localDeploy.dependsOn war
